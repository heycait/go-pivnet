// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/url"
	"sync"

	"github.com/cavaliercoder/grab"
	"github.com/pivotal-cf/go-pivnet/download"
)

type ProxyRequest struct {
	WrappedStub        func() *grab.Request
	wrappedMutex       sync.RWMutex
	wrappedArgsForCall []struct{}
	wrappedReturns     struct {
		result1 *grab.Request
	}
	wrappedReturnsOnCall map[int]struct {
		result1 *grab.Request
	}
	URLStub        func() *url.URL
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct{}
	uRLReturns     struct {
		result1 *url.URL
	}
	uRLReturnsOnCall map[int]struct {
		result1 *url.URL
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProxyRequest) Wrapped() *grab.Request {
	fake.wrappedMutex.Lock()
	ret, specificReturn := fake.wrappedReturnsOnCall[len(fake.wrappedArgsForCall)]
	fake.wrappedArgsForCall = append(fake.wrappedArgsForCall, struct{}{})
	fake.recordInvocation("Wrapped", []interface{}{})
	fake.wrappedMutex.Unlock()
	if fake.WrappedStub != nil {
		return fake.WrappedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.wrappedReturns.result1
}

func (fake *ProxyRequest) WrappedCallCount() int {
	fake.wrappedMutex.RLock()
	defer fake.wrappedMutex.RUnlock()
	return len(fake.wrappedArgsForCall)
}

func (fake *ProxyRequest) WrappedReturns(result1 *grab.Request) {
	fake.WrappedStub = nil
	fake.wrappedReturns = struct {
		result1 *grab.Request
	}{result1}
}

func (fake *ProxyRequest) WrappedReturnsOnCall(i int, result1 *grab.Request) {
	fake.WrappedStub = nil
	if fake.wrappedReturnsOnCall == nil {
		fake.wrappedReturnsOnCall = make(map[int]struct {
			result1 *grab.Request
		})
	}
	fake.wrappedReturnsOnCall[i] = struct {
		result1 *grab.Request
	}{result1}
}

func (fake *ProxyRequest) URL() *url.URL {
	fake.uRLMutex.Lock()
	ret, specificReturn := fake.uRLReturnsOnCall[len(fake.uRLArgsForCall)]
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct{}{})
	fake.recordInvocation("URL", []interface{}{})
	fake.uRLMutex.Unlock()
	if fake.URLStub != nil {
		return fake.URLStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.uRLReturns.result1
}

func (fake *ProxyRequest) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *ProxyRequest) URLReturns(result1 *url.URL) {
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 *url.URL
	}{result1}
}

func (fake *ProxyRequest) URLReturnsOnCall(i int, result1 *url.URL) {
	fake.URLStub = nil
	if fake.uRLReturnsOnCall == nil {
		fake.uRLReturnsOnCall = make(map[int]struct {
			result1 *url.URL
		})
	}
	fake.uRLReturnsOnCall[i] = struct {
		result1 *url.URL
	}{result1}
}

func (fake *ProxyRequest) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.wrappedMutex.RLock()
	defer fake.wrappedMutex.RUnlock()
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProxyRequest) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ download.IProxyRequest = new(ProxyRequest)
